// 定义proto语法版本，这里指定使用proto3版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: protobuf/pubsub.proto

// 这里随便定义个包名

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pubsub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pubsub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_protobuf_pubsub_proto_rawDescGZIP(), []int{0}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_protobuf_pubsub_proto protoreflect.FileDescriptor

var file_protobuf_pubsub_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x7c, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x69, 0x62, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x30, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protobuf_pubsub_proto_rawDescOnce sync.Once
	file_protobuf_pubsub_proto_rawDescData = file_protobuf_pubsub_proto_rawDesc
)

func file_protobuf_pubsub_proto_rawDescGZIP() []byte {
	file_protobuf_pubsub_proto_rawDescOnce.Do(func() {
		file_protobuf_pubsub_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_pubsub_proto_rawDescData)
	})
	return file_protobuf_pubsub_proto_rawDescData
}

var file_protobuf_pubsub_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_protobuf_pubsub_proto_goTypes = []interface{}{
	(*String)(nil), // 0: grpc.pubsub.String
}
var file_protobuf_pubsub_proto_depIdxs = []int32{
	0, // 0: grpc.pubsub.PubSubService.Publish:input_type -> grpc.pubsub.String
	0, // 1: grpc.pubsub.PubSubService.Subscibe:input_type -> grpc.pubsub.String
	0, // 2: grpc.pubsub.PubSubService.Publish:output_type -> grpc.pubsub.String
	0, // 3: grpc.pubsub.PubSubService.Subscibe:output_type -> grpc.pubsub.String
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protobuf_pubsub_proto_init() }
func file_protobuf_pubsub_proto_init() {
	if File_protobuf_pubsub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_pubsub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_pubsub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_pubsub_proto_goTypes,
		DependencyIndexes: file_protobuf_pubsub_proto_depIdxs,
		MessageInfos:      file_protobuf_pubsub_proto_msgTypes,
	}.Build()
	File_protobuf_pubsub_proto = out.File
	file_protobuf_pubsub_proto_rawDesc = nil
	file_protobuf_pubsub_proto_goTypes = nil
	file_protobuf_pubsub_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubServiceClient interface {
	// 使用rpc开头标识方法
	Publish(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Subscibe(ctx context.Context, in *String, opts ...grpc.CallOption) (PubSubService_SubscibeClient, error)
}

type pubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubServiceClient(cc grpc.ClientConnInterface) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) Publish(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/grpc.pubsub.PubSubService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceClient) Subscibe(ctx context.Context, in *String, opts ...grpc.CallOption) (PubSubService_SubscibeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubService_serviceDesc.Streams[0], "/grpc.pubsub.PubSubService/Subscibe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceSubscibeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubService_SubscibeClient interface {
	Recv() (*String, error)
	grpc.ClientStream
}

type pubSubServiceSubscibeClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceSubscibeClient) Recv() (*String, error) {
	m := new(String)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServiceServer is the server API for PubSubService service.
type PubSubServiceServer interface {
	// 使用rpc开头标识方法
	Publish(context.Context, *String) (*String, error)
	Subscibe(*String, PubSubService_SubscibeServer) error
}

// UnimplementedPubSubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServiceServer struct {
}

func (*UnimplementedPubSubServiceServer) Publish(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedPubSubServiceServer) Subscibe(*String, PubSubService_SubscibeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscibe not implemented")
}

func RegisterPubSubServiceServer(s *grpc.Server, srv PubSubServiceServer) {
	s.RegisterService(&_PubSubService_serviceDesc, srv)
}

func _PubSubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.pubsub.PubSubService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).Publish(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubService_Subscibe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceServer).Subscibe(m, &pubSubServiceSubscibeServer{stream})
}

type PubSubService_SubscibeServer interface {
	Send(*String) error
	grpc.ServerStream
}

type pubSubServiceSubscibeServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceSubscibeServer) Send(m *String) error {
	return x.ServerStream.SendMsg(m)
}

var _PubSubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.pubsub.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSubService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscibe",
			Handler:       _PubSubService_Subscibe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/pubsub.proto",
}
